(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{356:function(t,s,a){"use strict";a.r(s);var e=a(42),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"二进制的逻辑运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制的逻辑运算"}},[t._v("#")]),t._v(" 二进制的逻辑运算")]),t._v(" "),a("p",[a("code",[t._v("React Fiber")]),t._v("中对"),a("code",[t._v("TypeOfMode")]),t._v("的设计，目的是简化类型比较，以及类型复合的方向")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NoContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" AsyncMode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" StrictMode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b010")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ProfileMode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("scheduler（异步调度）\n"),a("ul",[a("li",[t._v("维护时间片")]),t._v(" "),a("li",[t._v("模拟rICb（浏览器上的任务例如动画、交互都执行完成，JS引擎有空闲的时候调用回调，优先级比rAF低 ），调度列表、超时判断")])])]),t._v(" "),a("li",[t._v("scheduler产生的背景")]),t._v(" "),a("li",[t._v("scheduler Demo")]),t._v(" "),a("li",[t._v("fiber结构")]),t._v(" "),a("li",[t._v("react流程")]),t._v(" "),a("li",[t._v("scheduler 核心")]),t._v(" "),a("li",[t._v("整体流程概览")])]),t._v(" "),a("p",[t._v("任务调度的概念，调度什么东西？为了达到什么目的")]),t._v(" "),a("h2",{attrs:{id:"expirationtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expirationtime"}},[t._v("#")]),t._v(" expirationTime")]),t._v(" "),a("p",[t._v("在react中，为防止某个update因为优先级的原因一直被打断而未能执行。react会设置一个ExpirationTime，当时间到了ExpirationTime的时候，如果某个update还未执行的话，react将会强制执行该update，这就是ExpirationTime的作用。")]),t._v(" "),a("h3",{attrs:{id:"两种超时时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种超时时间"}},[t._v("#")]),t._v(" 两种超时时间")]),t._v(" "),a("p",[t._v("React 中有两种类型的ExpirationTime，一个是Interactive的，另一种是普通的异步。Interactive的比如说是由事件触发的，那么他的响应优先级会比较高因为涉及到交互。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将两个数值带入expirationTime计算公式")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异步更新，优先级较低，得到的expirationTime较大")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOW_PRIORITY_EXPIRATION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOW_PRIORITY_BATCH_SIZE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("250")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件响应，优先级较高，得到的expirationTime较小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HIGH_PRIORITY_EXPIRATION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HIGH_PRIORITY_BATCH_SIZE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"计算公式-异步更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算公式-异步更新"}},[t._v("#")]),t._v(" 计算公式(异步更新)")]),t._v(" "),a("p",[a("code",[t._v("((((currentTime - 2 + 5000 / 10) / 25) | 0) + 1) * 25")])]),t._v(" "),a("p",[t._v("currentTime的计算公式："),a("code",[t._v("((now / 10) | 0) + 2")])]),t._v(" "),a("p",[t._v("翻译一下就是：当前时间加上498然后处以25取整再加1再乘以 5，需要注意的是这里的currentTime是经过msToExpirationTime处理的，也就是((now / 10) | 0) + 2，所以这里的减去2可以无视，而除以 10 取整应该是要抹平 10 毫秒内的误差")]),t._v(" "),a("p",[t._v("最终结果是以25为单位向上增加的，比如说我们输入10002 - 10026之间，最终得到的结果都是10525，但是到了10027的到的结果就是10550，这就是除以25取整的效果。")]),t._v(" "),a("p",[t._v("之所以是为么磨平25ms的时间差是为了让非常相近的两次更新得到相同的expirationTime，然后在一次更新中完成，相当于一个自动的batchedUpdates")])])}),[],!1,null,null,null);s.default=r.exports}}]);