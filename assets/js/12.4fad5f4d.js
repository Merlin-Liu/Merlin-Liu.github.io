(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{360:function(e,t,n){"use strict";n.r(t);var o=n(42),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),n("p",[e._v("2017-12-02 14:46，发布于博客园")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/isLiu/p/7919856.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/isLiu/p/7919856.html"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("查找基本分类如下：")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("线性表的查找")]),e._v(" "),n("ul",[n("li",[e._v("顺序查找")]),e._v(" "),n("li",[e._v("折半查找")]),e._v(" "),n("li",[e._v("分块查找")])])]),e._v(" "),n("li",[n("p",[e._v("树表的查找")]),e._v(" "),n("ul",[n("li",[e._v("二叉排序树")]),e._v(" "),n("li",[e._v("平衡二叉树")]),e._v(" "),n("li",[e._v("B树")]),e._v(" "),n("li",[e._v("B+树")])])]),e._v(" "),n("li",[n("p",[e._v("散列表的查找")])])]),e._v(" "),n("p",[e._v("今天介绍"),n("strong",[e._v("二叉排序树")]),e._v("。")]),e._v(" "),n("p",[n("strong",[e._v("二叉排序树")]),e._v(" ( Binary Sort Tree ) 又称为"),n("strong",[e._v("二叉查找树")]),e._v("，它是一种对排序和查找都很有用的特殊二叉树。")]),e._v(" "),n("h2",{attrs:{id:"_1-二叉排序树的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-二叉排序树的定义"}},[e._v("#")]),e._v(" 1. 二叉排序树的定义")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("二叉排序树是具有如下性质的二叉树：")]),e._v(" "),n("ol",[n("li",[e._v("若它的左子树不为空，则左子树上所有节点的值均小于它的根节点的值。")]),e._v(" "),n("li",[e._v("若它的右子树不为空，则右子树上的所有节点的值均大于它的根节点的值。")]),e._v(" "),n("li",[e._v("它的左子树、右子树也均为二叉排序树。")])]),e._v(" "),n("p",[e._v("二叉排序树是递归定义的。所以可以得出二叉排序树的一个重要性质："),n("strong",[e._v("中序遍历一棵二叉排序树时可以得到一个节点值递增的有序序列")]),e._v("。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://images2018.cnblogs.com/blog/1272362/201711/1272362-20171129130416769-173940461.png",alt:""}})]),e._v(" "),n("p",[e._v("若中序遍历上图二叉树，则可以得到一个按数值大小排序的递增序列："),n("code",[e._v("3，12，24，37，45，53，61，78，90，100")])]),e._v(" "),n("h2",{attrs:{id:"_2-创建一个二叉排序树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建一个二叉排序树"}},[e._v("#")]),e._v(" 2. 创建一个二叉排序树")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("二叉树是由节点构成，所以我们需要一个Node类，node实例保存当前节点的数据，以及保存左右节点的指针，还可以输出当前节点数据。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  class Node {\n    constructor(data, leftNode, rightNode) {\n      this.data = data\n      this.leftNode = leftNode\n      this.rightNode = rightNode\n    }\n    print () {\n      return this.data\n    }\n  }\n")])])]),n("p",[e._v("二叉排序树有一个根节点，根节点存储了根节点的数据，左右子节点的地址，还有相应的实例方法，提供插入、遍历、查找等操作。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  class BST {\n    constructor() {\n      this.root = null\n    }\n    \n    insert (data) {...}\n    preOrder () {...}\n    inOrder () {...}\n    postOrder () {...}\n    ...\n  }\n")])])]),n("h2",{attrs:{id:"_3-二叉排序树的插入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-二叉排序树的插入"}},[e._v("#")]),e._v(" 3. 二叉排序树的插入")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("我们要根据二叉排序树树的性质来决定insert的data的位置")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("若当前是一棵空树，则将插入的数据作为根节点")])]),e._v(" "),n("li",[n("p",[e._v("若不是空树，循环遍历二叉排序树的节点")]),e._v(" "),n("ul",[n("li",[e._v("若当前遍历的节点的data大于要插入的data，则将下一个要遍历的节点赋值为当前遍历的节点的左节点，进行下一层循环，直到叶子节点为止，将data作为叶子节点的左节点")]),e._v(" "),n("li",[e._v("若当前遍历的节点的data小于要插入的data，则将下一个要遍历的节点赋值为当前遍历的节点的右节点，进行下一层循环，直到叶子节点为止，将data作为叶子节点的右节点")])])])]),e._v(" "),n("p",[e._v("还是代码直观")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  function insert (data) {\n    if (this.find(data)) {\n        return\n    }\n\n    var node = new Node(data, null, null)\n    if (this.root == null) {\n      this.root = node\n    } else {\n      var currentNode = this.root\n      var parentNode\n      while (currentNode) {\n        parentNode = currentNode\n        if (data < currentNode.data) {\n          currentNode = currentNode.leftNode\n          if (currentNode == null) {\n            parentNode.leftNode = node\n            break\n          }\n        } else {\n          currentNode = currentNode.rightNode\n          if (currentNode == null) {\n            parentNode.rightNode = node\n            break\n          }\n        }\n      }\n    }\n  }\n")])])]),n("h2",{attrs:{id:"_4-递归遍历二叉排序树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-递归遍历二叉排序树"}},[e._v("#")]),e._v(" 4. 递归遍历二叉排序树")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("简单，贴下代码，重点在非递归遍历")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  class BST {\n    constructor() {\n      this.data = null\n    }\n    \n    preOrder () {\n      preOrderFn(this.root)\n    }\n    inOrder () {\n      inOrderFn(this.root)\n    }\n    postOrder () {\n      postOrderFn(this.root)\n    }\n  }\n  \n  function preOrderFn (node) {\n    if (node) {\n      console.log(node.print())\n      preOrderFn(node.leftNode)\n      preOrderFn(node.rightNode)\n    }\n  }\n  function inOrderFn (node) {\n    if (node) {\n      inOrderFn(node.leftNode)\n      console.log(node.print())\n      inOrderFn(node.rightNode)\n    }\n  }\n  function postOrderFn (node) {\n    postOrderFn (node.leftNode)\n    postOrderFn (node.rightNode)\n    console.log(node.print())\n  }\n")])])]),n("h2",{attrs:{id:"_5-非递归中序遍历二叉排序树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-非递归中序遍历二叉排序树"}},[e._v("#")]),e._v(" 5.非递归中序遍历二叉排序树")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("中序遍历的非递归算法最简单，后序遍历的非递归算法最难，所以先介绍中序遍历。")]),e._v(" "),n("p",[e._v("非递归遍历一定要用到栈。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  class Stack {\n    constructor() {\n      this.arr = []\n    }\n    pop () {\n      return this.arr.shift()\n    }\n    push (data) {\n      this.arr.unshift(data)\n    }\n    isEmpty () {\n      return this.arr.length == 0\n    }\n  }\n")])])]),n("p",[e._v("我们一点一点写想，中序遍历，肯定是要先找到左子树最下面的节点吧？想不明白就好好想想。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  function inOrderWithoutRecursion (root) {\n    var parentNode = root\n    var stack = new Stack()\n\n    // 一直遍历到左子树的最下面，将一路遍历过的节点push进栈中\n    while (parentNode) {\n      stack.push(parentNode)\n      parentNode = parentNode.leftNode\n    }\n  }\n")])])]),n("p",[e._v("这里为什么要先让遍历过的节点入栈呢？中序遍历，先遍历左节点，再根节点，最后是右节点，所以我们需要保存一下根节点，以便接下来访问根节点和借助根节点来访问右节点。")]),e._v(" "),n("p",[e._v("1.现在我们已经到了左子树的最下面的节点了，这时它是一个叶子节点。通过遍历，它也在栈中而且是在栈顶，所以就可以访问它的data了，然后访问根节点的data，最后将parentNode指向根节点的右节点，访问右节点。")]),e._v(" "),n("p",[e._v("如图")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images2017.cnblogs.com/blog/1272362/201711/1272362-20171129190517511-281709335.png",alt:""}})]),e._v(" "),n("p",[e._v("按我上面说的话，代码应该是这个样子的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    parentNode = stack.pop()\n    console.log(parentNode.data)\n    parentNode = stack.pop()\n    console.log(parentNode.data)\n    parentNode = parentNode.rightNode\n")])])]),n("p",[e._v("2.但是还有一种情况呢？如果左子树最下面的节点没有左节点，只有右节点呢？也就是说如果这个节点不是叶子节点呢？那么就直接访问根节点的data，再将parentNode指向根节点的右节点，访问右节点。对吧？")]),e._v(" "),n("p",[e._v("如图")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images2017.cnblogs.com/blog/1272362/201711/1272362-20171129190559058-1541237365.png",alt:""}})]),e._v(" "),n("p",[e._v("那现在代码又成了这个样子。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    parentNode = stack.pop()\n    console.log(parentNode.data)\n    parentNode = parentNode.rightNode\n")])])]),n("p",[e._v("那么怎么统一格式呢？之前我们说到当parentNode不存在时就需要出栈了，那我们可以把左子树最下面的节点也就是第一种情况时的叶子节点看作一个根节点，继续访问它的右节点，因为它是一个叶子节点，所以右节点为null，所以就又执行了一次出栈操作。这时候代码就可以统一了，好好想一想，有点抽象。")]),e._v(" "),n("p",[e._v("统一后的代码就是情况2的代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    parentNode = stack.pop()\n    console.log(parentNode.data)\n    parentNode = parentNode.rightNode\n")])])]),n("p",[e._v("如果上面的都理解了的话，就很简单了，贴代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  function inOrderWithoutRecursion (root) {\n    if (!root)\n      return\n\n    var parentNode = root\n    var stack = new Stack()\n\n    while (parentNode || !stack.isEmpty()) {\n\n      // 一直遍历到左子树的最下面，将一路遍历过的节点push进栈中\n      while (parentNode) {\n        stack.push(parentNode)\n        parentNode = parentNode.leftNode\n      }\n      // 当parentNode为空时，说明已经达到了左子树的最下面，可以出栈操作了\n      if (!stack.isEmpty()) {\n        parentNode = stack.pop()\n        console.log(parentNode.data)\n        // 进入右子树，开始新一轮循环\n        parentNode = parentNode.rightNode\n      }\n    }\n  }\n")])])]),n("p",[e._v("优化")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  function inOrderWithoutRecursion (root) {\n    if (!root)\n      return\n\n    var parentNode = root\n    var stack = new Stack()\n\n    while (parentNode || !stack.isEmpty()) {\n\n      // 一直遍历到左子树的最下面，将一路遍历过的节点push进栈中\n      if (parentNode) {\n        stack.push(parentNode)\n        parentNode = parentNode.leftNode\n      }\n      // 当parentNode为空时，说明已经达到了左子树的最下面，可以出栈操作了\n      else {\n        parentNode = stack.pop()\n        console.log(parentNode.data)\n        // 进入右子树，开始新一轮循环\n        parentNode = parentNode.rightNode\n      }\n    }\n  }\n")])])]),n("h2",{attrs:{id:"_6-非递归先序遍历二叉排序树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-非递归先序遍历二叉排序树"}},[e._v("#")]),e._v(" 6.非递归先序遍历二叉排序树")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("有了中序遍历的基础，掌握先序遍历就不难了吧？先序就是到了根节点就打印出来，然后将节点入栈，然后左子树，基本与中序类似，想想就明白。")]),e._v(" "),n("p",[e._v("直接贴最终代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  function PreOrderWithoutRecursion (root) {\n    if (!root)\n      return\n\n    var parentNode = root\n    var stack = new Stack()\n\n    while (parentNode || !stack.isEmpty()) {\n\n      // 一直遍历到左子树的最下面，一边打印data,将一路遍历过的节点push进栈中\n      if (parentNode) {\n        console.log(parentNode.data)\n        stack.push(parentNode)\n        parentNode = parentNode.leftNode\n      }\n      // 当parentNode为空时，说明已经达到了左子树的最下面，可以出栈操作了\n      else {\n        parentNode = stack.pop()\n        // 进入右子树，开始新一轮循环\n        parentNode = parentNode.rightNode\n      }\n    }\n  }\n")])])]),n("h2",{attrs:{id:"_7-非递归后序遍历二叉排序树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-非递归后序遍历二叉排序树"}},[e._v("#")]),e._v(" 7.非递归后序遍历二叉排序树")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("后序遍历中，一个根节点被访问的前提是，右节点不存在或者右节点已经被访问过")]),e._v(" "),n("p",[e._v("后序遍历难点在于：判断右节点是否被访问过。")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("如果右节点不存在或者右节点已经被访问过，则访问根节点")])]),e._v(" "),n("li",[n("p",[e._v("如果不符合上述条件，则跳过根节点，去访问右节点")])])]),e._v(" "),n("p",[e._v("我们可以使用一个变量来保存上一个访问的节点，如果是当前访问的节点的右节点就是上一个访问过的节点，证明右节点已经被访问过了，可以去访问根节点了。")]),e._v(" "),n("p",[e._v("这里需要注意的一点是：节点Node是一个对象，如果用==比较的话，返回的永远是false，所以我们比较的是node的data属性。")]),e._v(" "),n("p",[e._v("代码在这里")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function PostOrderWithoutRecursion (root) {\n    if (!root)\n      return\n\n    var parentNode = root\n    var stack = new Stack()\n    var lastVisitNode = null\n\n    while (parentNode || !stack.isEmpty()) {\n      if (parentNode) {\n        stack.push(parentNode)\n        parentNode = parentNode.leftNode\n      }\n      else {\n        parentNode = stack.pop()\n        // 如果当前节点没有右节点或者是右节点被访问过，则访问当前节点\n        if (!parentNode.rightNode || parentNode.rightNode.data == lastVisitNode.data) {\n          console.log(parentNode.data)\n          lastVisitNode = parentNode\n        }\n        // 访问右节点\n        else {\n          stack.push(parentNode)\n          parentNode = parentNode.rightNode\n          while (parentNode) {\n            parentNode = parentNode.leftNode\n          }\n        }\n      }\n    }\n  }\n")])])]),n("h2",{attrs:{id:"_8-二叉排序树的查找"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-二叉排序树的查找"}},[e._v("#")]),e._v(" 8.二叉排序树的查找")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("写查找是为了删除节点做准备。")]),e._v(" "),n("p",[e._v("1.查找给定值")]),e._v(" "),n("p",[e._v("很简单，根据要查找的数据和根节点对比，然后遍历左子树或者右子树就好了。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  find (data) {\n    var currentNode = this.root\n    while (currentNode) {\n      if (currentNode.data == data) {\n        return currentNode\n      } else if (currentNode.data > data) {\n        currentNode = currentNode.leftNode\n      } else {\n        currentNode = currentNode.rightNode\n      }\n    }\n    return null\n  }\n")])])]),n("p",[e._v("2.查找最大值")]),e._v(" "),n("p",[e._v("很简单，直接找到最右边的节点就是了")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  getMax () {\n    var currentNode = this.root\n    while (currentNode.rightNode) {\n      currentNode = currentNode.rightNode\n    }\n    return currentNode.data\n  }\n")])])]),n("p",[e._v("3.查找最小值")]),e._v(" "),n("p",[e._v("一样")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  getMax () {\n    var currentNode = this.root\n    while (currentNode.leftNode) {\n      currentNode = currentNode.leftNode\n    }\n    return currentNode.data\n  }\n")])])]),n("h2",{attrs:{id:"_9-二叉排序树的删除"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-二叉排序树的删除"}},[e._v("#")]),e._v(" 9.二叉排序树的删除")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("删除很重要，说下逻辑：")]),e._v(" "),n("p",[e._v("首先从二叉排序树的根节点开始查找关键字为key的待删节点，如果树中不存在此节点，则不做任何操作；")]),e._v(" "),n("p",[e._v("否则，假设待删节点为"),n("code",[e._v("delNode")]),e._v("，其父节点为"),n("code",[e._v("delNodeParent")]),e._v("，"),n("code",[e._v("delNodeLeft")]),e._v("和"),n("code",[e._v("delNodeRight")]),e._v("分别为待删节点的左子树、右子树。")]),e._v(" "),n("p",[e._v("可设"),n("code",[e._v("delNode")]),e._v("是"),n("code",[e._v("delNodeParent")]),e._v("的左子树（右子树情况类似）。\b 分下面三种情况考虑")]),e._v(" "),n("p",[e._v("1.若"),n("code",[e._v("delNode")]),e._v("为叶子节点，即"),n("code",[e._v("delNodeLeft")]),e._v("和"),n("code",[e._v("delNodeRight")]),e._v("均为空。删除叶子节点不会破坏整棵树的结构，则只需修改"),n("code",[e._v("delNodeParent")]),e._v("的指向即可。")]),e._v(" "),n("p",[n("strong",[n("center",[n("font",{attrs:{color:"red"}},[e._v("delNodeParent.leftNode = null")])],1)],1)]),e._v(" "),n("p",[e._v("2.若"),n("code",[e._v("delNode")]),e._v("只有左子树"),n("code",[e._v("delNodeLeft")]),e._v("或者只有右子树"),n("code",[e._v("delNodeRight")]),e._v("，此时只要令"),n("code",[e._v("delNodeLeft")]),e._v("或者"),n("code",[e._v("delNodeRight")]),e._v("直接成为待删节点的父节点的左子树即可。")]),e._v(" "),n("p",[n("strong",[n("center",[n("font",{attrs:{color:"red"}},[e._v("delNodeParent.leftNode = delNode.leftNode")])],1)],1),e._v(" "),n("center",[e._v("（或者delNodeParent.leftNode = delNode.rightNode）")])],1),e._v(" "),n("p",[e._v("3.若"),n("code",[e._v("delNode")]),e._v("左子树和右子树均不为空，删除"),n("code",[e._v("delNode")]),e._v("之后，为了保持其他元素之间的相对位置不变，可以有两种处理办法")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("令"),n("code",[e._v("delNode")]),e._v("的左子树为"),n("code",[e._v("delNodeParent")]),e._v("的左子树，而"),n("code",[e._v("delNode")]),e._v("的右子树为"),n("code",[e._v("delNode")]),e._v("的左子树中序遍历的最后一个节点（令其为"),n("code",[e._v("leftBigNode")]),e._v("，即左子树中最大的节点，因为要符合二叉树的性质，仔细想一想）的右子树\n"),n("strong",[n("center",[n("font",{attrs:{color:"red"}},[e._v("delNodeParent.leftNode = delNode.leftNode")])],1)],1),e._v(" "),n("strong",[n("center",[n("font",{attrs:{color:"red"}},[e._v("leftBigNode.rightNode = delNode.rightNode")])],1)],1)])]),e._v(" "),n("li",[n("p",[e._v("令"),n("code",[e._v("delNode")]),e._v("的直接前驱（也就是左子树中最大的节点，令其为"),n("code",[e._v("leftBigNode")]),e._v("）替代"),n("code",[e._v("delNode")]),e._v("，然后再从二叉排序树中删除它的直接前驱（或直接后继，原理类似）。当以直接前驱替代"),n("code",[e._v("delNode")]),e._v("时，由于"),n("code",[e._v("leftBigNode")]),e._v("只有左子树（否则它就不是左子树中最大的节点），则在删除"),n("code",[e._v("leftBigNode")]),e._v("之后，只要令"),n("code",[e._v("leftBigNode")]),e._v("的左子树为双亲"),n("code",[e._v("leftBigNodeParent")]),e._v("的右子树即可。\n"),n("strong",[n("center",[n("font",{attrs:{color:"red"}},[e._v("delNode.data = leftBigNode.data")])],1)],1),e._v(" "),n("strong",[n("center",[n("font",{attrs:{color:"red"}},[e._v("leftBigNodeParent.rightNode = leftBigNode.leftNode")])],1)],1)])])]),e._v(" "),n("p",[e._v("画了三张图片来理解下：")]),e._v(" "),n("p",[e._v("删除节点P之前：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images2017.cnblogs.com/blog/1272362/201712/1272362-20171202120305479-872221890.png",alt:""}})]),e._v(" "),n("p",[e._v("第一种方式删除后：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images2017.cnblogs.com/blog/1272362/201712/1272362-20171202120436479-2058277545.png",alt:""}})]),e._v(" "),n("p",[e._v("第二种方式删除后：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images2017.cnblogs.com/blog/1272362/201712/1272362-20171202120656604-2075321669.png",alt:""}})]),e._v(" "),n("p",[e._v("显然，第一种方式可能增加数的深度，而后一种方法是以被删节点左子树中最大的节点代替被删的节点，然后从左子树中删除这个节点。此节点一定没有子树（同上，否则它就不是左子树中最大的节点），这样不会增加树的高度，所以常采用这种方案，下面的算法也使用这种方案。")]),e._v(" "),n("p",[e._v("代码注释很清除，好好理解下，这块真的不好想")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  deleteNode (data) {\n    /********************** 初始化 **************************/\n    var delNode = this.root,\n        delNodeParent = null\n    /************ 从根节点查找关键字为data的节点 ***************/\n    while (delNode) {\n      if (delNode.data == data) break\n      delNodeParent = delNode // 记录被删节点的双亲节点\n      if (delNode.data > data) delNode = delNode.leftNode // 在被删节点左子树中继续查找\n      else delNode = delNode.rightNode  // 在被删节点的右子树中继续查找\n    }\n    if (!delNode) { // 没找到\n      return \n    }\n    /**\n     * 三种情况\n     * 1.被删节点既有左子树，又有右子树\n     * 2.被删节点只有右子树\n     * 3.被删节点只有左子树\n    **/\n    var leftBigNodeParent = delNode \n    if (delNode.leftNode && delNode.rightNode) { // 被删节点左右子树都存在\n      var leftBigNode = delNode.leftNode\n      while (leftBigNode.rightNode) { // 在被删节点的左子树中寻找其前驱节点，即最右下角的节点，也就是左子树中数值最大的节点\n        leftBigNodeParent = leftBigNode\n        leftBigNode = leftBigNode.rightNode // 走到右尽头\n      }\n      delNode.data = leftBigNode.data // 令被删节点的前驱替代被删节点\n      if (leftBigNodeParent.data != delNode.data) {\n        leftBigNodeParent.rightNode = leftBigNode.leftNode // 重接被删节点的前驱的父节点的右子树\n      } else {\n        leftBigNodeParent.leftNode = leftBigNode.leftNode // 重接被删节点的前驱的父节点的左子树\n      }\n    } else if (!delNode.leftNode) {\n      delNode = delNode.rightNode // 若被删节点没有左子树，只需重接其右子树\n    } else if (!delNode.rightNode) {\n      delNode = delNode.leftNode // 若被删节点没有右子树，只需重接其左子树\n    }\n    /********* 将被删节点的子树挂接到其父节点的相应位置 **********/\n    if (!delNodeParent) { \n      this.root = delNode // 若被删节点是根节点\n    } else if (leftBigNodeParent.data == delNodeParent.data) {\n      delNodeParent.leftNode = delNode // 挂接到父节点的左子树位置\n    } else {\n      delNodeParent.rightNode = delNode // 挂接到父节点的右子树位置\n    }\n  }\n")])])]),n("h2",{attrs:{id:"_10-其他方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-其他方法"}},[e._v("#")]),e._v(" 10.其他方法")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("1.复制二叉排序树")]),e._v(" "),n("p",[e._v("这一块我先用了递归，后来想到，BST是个对象，直接深度克隆就好了。。。不说了")]),e._v(" "),n("p",[e._v("2.二叉排序树深度")]),e._v(" "),n("p",[e._v("递归递归递归")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  class BST {\n    constructor() {\n      this.root = null\n    }\n    depth () {\n      return depthFn(this.root)\n    }\n  }\n\n  function depthFn (node) {\n    if (!node) {\n      return 0\n    } else {\n      var leftDepth = depthFn(node.leftNode)\n      var rightDepth = depthFn(node.rightNode)\n      if (leftDepth > rightDepth)\n        return (leftDepth + 1)\n      else\n        return (rightDepth + 1)\n    }\n  }\n")])])]),n("p",[e._v("3.二叉排序树节点个数")]),e._v(" "),n("p",[e._v("递归递归递归")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  class BST {\n    constructor() {\n      this.root = null\n    }\n    nodeCount () {\n      return nodeCount(this.root)\n    }\n  }\n  function nodeCount(node) {\n    if (!node) {\n      return 0\n    } else {\n      return nodeCount(node.leftNode) + nodeCount(node.rightNode) + 1\n    }\n  }\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);