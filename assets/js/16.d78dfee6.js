(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{361:function(t,n,a){"use strict";a.r(n);var s=a(42),r=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("2017-11-19 17:52，发布于博客园")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/isLiu/p/7859669.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/isLiu/p/7859669.html"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("本篇是关于手写代码的题目。")]),t._v(" "),a("h2",{attrs:{id:"_1-实现一个trim函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现一个trim函数"}},[t._v("#")]),t._v(" 1.实现一个trim函数")]),t._v(" "),a("p",[t._v("关于性能的写法也不多说了，只是用最直观的写法来写一下，使用正则有大概五六种写法，感兴趣可以自己去研究下，推荐《高性能JavaScript》")]),t._v(" "),a("p",[t._v("1.正则实现")]),t._v(" "),a("ul",[a("li",[t._v("trim")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('       String.prototype.trim = function () {\n　　    return this.replace(/(^\\s*)|(\\s*$)/g, "");\n　　}\n')])])]),a("ul",[a("li",[t._v("leftTrim")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('       String.prototype.leftTrim = function () {\n　　    return this.replace(/(^\\s*)/g,"");\n　　}\n')])])]),a("ul",[a("li",[t._v("rightTrim")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('       String.prototype.rightTrim = function () {\n　　    return this.replace(/(\\s*$)/g,"");\n　　}\n')])])]),a("p",[t._v("2.非正则实现")]),t._v(" "),a("ul",[a("li",[t._v("trim")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tString.prototype.trim = function () {\n         var start = 0,\t\t\t\n             end = this.length - 1,\n             ws = /\\s/\t\t\t\n\t    while (ws.indexOf(this.charAt(start)) > -1) {\n            start ++\n\t    }\n\t    while (end > start && ws.indexOf(this.charAt(end)) > -1) {\n            end --\n\t    }\n\t    return this.slice(start, end + 1)　　 \n\t }\n")])])]),a("ul",[a("li",[t._v("leftTrim")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tString.prototype.leftTrim = function () {\n\t\tvar start = 0,\t\t\t\n\t\t     end = this.length - 1,\n\t\t     ws = /\\s/\t\t\t\n\t\twhile (ws.indexOf(this.charAt(start)) > -1) {\n\t\t\t start ++\n\t \t}\n\t\treturn this.slice(start, end)\n　}\n")])])]),a("ul",[a("li",[t._v("rightTrim")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tString.prototype.rightTrim = function () {\n\t\tvar start = 0,\t\t\t\n\t\t     end = this.length - 1,\n\t\t     ws = /\\s/\t\t\t\n\t\twhile (end > start && ws.indexOf(this.charAt(end)) > -1) {\n\t\t\tend --\n\t\t}\n\t\treturn this.slice(start, end + 1)\n　}\n")])])]),a("p",[t._v("3.混合实现")]),t._v(" "),a("p",[t._v("当字符串的末尾只有一小段空白时候，正则表达式会陷入疯狂工作状态；而通过循环遍历字符串的效率也比不上正则表达式，所以有了这种混合模式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tString.prototype.trim = function () {\n\t\tvar str = this.replace(/^\\s+/, '')\n\t\t\t\tend = str.length - 1\n\t\t\t\tws = /\\s/\n\t\twhile (ws.test(str.charAt(end))) {\n\t\t\tend --\n\t\t}\n\t\treturn str.slice(0, end + 1)\n　}\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"_2-call、apply、bind之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-call、apply、bind之间的区别"}},[t._v("#")]),t._v(" 2.call、apply、bind之间的区别")]),t._v(" "),a("p",[t._v("总之三种方法都是改变函数内this的指向")]),t._v(" "),a("p",[t._v("1.fn.call (context, arg1, arg2, .....)")]),t._v(" "),a("p",[t._v("call中第一个参数是fn的上下文，剩下的参数就是需要向fn中传递的参数")]),t._v(" "),a("p",[t._v("2.fn.apply (context, [args])")]),t._v(" "),a("p",[t._v("apply同call类似，第一个参数也是fn的上下文，和call不同的是，apply第二个参数是数组，call的第二个及第二个以后的参数都是数组里面的元素")]),t._v(" "),a("p",[t._v("3.fn.bind (context)")]),t._v(" "),a("p",[t._v("bind会创建一个函数，称之为绑定函数，调用这个函数时，绑定函数会以创建它是bind方法传入的第一个参数作为自己的上下文，第二个及第二个以后的参数并且加上绑定函数运行时传递进来的参数作为原函数的参数来调用原函数。 （有点绕哈，不过对下一道题有帮助）")]),t._v(" "),a("p",[t._v("4.call、apply、bind最大的区别就是bind不会立即调用，会返回一个函数，apply、call会立即调用。")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_3-用call或者apply实现一个bind函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-用call或者apply实现一个bind函数"}},[t._v("#")]),t._v(" 3.用call或者apply实现一个bind函数")]),t._v(" "),a("p",[t._v("看看上面的bind定义吧，不多说了")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== "function") {\n      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n        fToBind = this, \n        fNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(this instanceof fNOP && oThis\n                                 ? this\n                                 : oThis || window,\n                               aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);